# serializer version: 1
# name: test_All[Apache-2.0]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: Apache-2.0
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      Copyright <<year>> <<author_name>>
      
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
      
          http://www.apache.org/licenses/LICENSE-2.0
      
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/Apache-2.0/" target="_blank">Apache-2.0</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">8) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">9) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">10) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">11) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">12) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">13) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">14) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">15) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">16) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">17) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "Apache-2.0"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[BSD-3-Clause-Clear]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: BSD-3-Clause-Clear
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      Copyright <<year>> <<author_name>>
      
      Redistribution and use in source and binary forms, with or without
      modification are permitted provided that the following conditions are met:
      
      1. Redistributions of source code must retain the above copyright notice,
         this list of conditions and the following disclaimer.
      
      2. Redistributions in binary form must reproduce the above copyright notice,
         this list of condition and the following disclaimer in the documentation
         and/or other materials provided with the distribution.
      
      3. Neither the name of the copyright holder nor the names of its
         contributors may be used to endorse or promote products derived from this
         software without specific prior written permission.
      
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
      LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
      CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
      SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
      INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
      CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
      ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
      POSSIBILITY OF SUCH DAMAGE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/BSD-3-Clause-Clear/" target="_blank">BSD-3-Clause-Clear</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">8) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">9) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">10) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">11) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">12) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">13) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">14) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">15) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">16) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">17) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "BSD-3-Clause-Clear"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[BSL-1.0]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: BSL-1.0
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      Copyright <<year>> <<author_name>>
      
      Boost Software License - Version 1.0 - August 17th, 2003
      
      Permission is hereby granted, free of charge, to any person or organization
      obtaining a copy of the software and accompanying documentation covered by
      this license (the "Software") to use, reproduce, display, distribute,
      execute, and transmit the Software, and to prepare derivative works of the
      Software, and to permit third-parties to whom the Software is furnished to
      do so, all subject to the following:
      
      The copyright notices in the Software and this entire statement, including
      the above license grant, this restriction and the following disclaimer,
      must be included in all copies of the Software, in whole or in part, and
      all derivative works of the Software, unless such copies or derivative
      works are solely in the form of machine-executable object code generated by
      a source language processor.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
      SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
      FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
      ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/BSL-1.0/" target="_blank">BSL-1.0</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">8) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">9) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">10) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">11) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">12) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">13) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">14) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">15) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">16) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">17) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "BSL-1.0"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[GPL-3.0-or-later]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: GPL-3.0-or-later
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      Copyright (C) <<year>> <<author_name>>
      
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/GPL-3.0-or-later/" target="_blank">GPL-3.0-or-later</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">8) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">9) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">10) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">11) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">12) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">13) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">14) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">15) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">16) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">17) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "GPL-3.0-or-later"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[MIT]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: MIT
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      MIT LICENSE
      
      Copyright (c) <<year>> <<author_name>>
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/MIT/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">8) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">9) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">10) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">11) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">12) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">13) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">14) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">15) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">16) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">17) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "MIT"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[NoCoverageBadge]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: ''
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: MIT
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: ""
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      MIT LICENSE
      
      Copyright (c) <<year>> <<author_name>>
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/MIT/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">6) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">7) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">8) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">9) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">10) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">11) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">12) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">13) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">14) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">15) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "MIT"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[NoSignArtifacts]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: MIT
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: false
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'LICENSE': '''
      MIT LICENSE
      
      Copyright (c) <<year>> <<author_name>>
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      
      ## License
      `this_is_the_project_name` is licensed under the <a href="https://choosealicense.com/licenses/MIT/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">8) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">9) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">10) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">11) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">12) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">13) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">14) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">15) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.license]
      text = "MIT"
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
# name: test_All[None]
  dict({
    '.copier-answers.yml': '''
      # Changes here will be overwritten by Copier; DO NOT MODIFY THIS FILE DIRECTLY!
      #
      # This file was generated using copier (https://copier.readthedocs.io/) with the
      # template copier-UvScaffolding (https://github.com/gt-sse-center/copier-UvScaffolding).
      # Additional information (including instructions on how to use this template with copier) is
      # available at https://github.com/gt-sse-center/copier-UvScaffolding.
      #
      
      _commit: <<commit>>
      _src_path: <<cwd>>
      author_email: <<author_email>>
      author_name: <<author_name>>
      coverage_badge_gist_id: <<coverage_badge_gist_id>>
      coverage_badge_gist_username: <<coverage_badge_gist_username>>
      github_host: https://github.com
      github_repo_name: <<github_repo_name>>
      github_username: <<github_username>>
      license: None
      project_name: this_is_the_project_name
      python_package_name: this_is_the_project_name
      python_versions: 3.10, 3.11, 3.12, 3.13
      sign_artifacts_question: true
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.13, 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/actions': None,
    '.github/actions/release_impl/action.yml': '''
      name: "[impl] Release"
      description: "Releases the current repository."
      
      # spell-checker: words jedisct, minisig, minisign, pypi, schneegans
      
      inputs:
        minisign_private_key:
          description: "Key used to sign dist artifacts. No signatures will be created if the key is empty."
          required: false
          default: ""
      
        pypi_publish_token:
          description: "Token used to publish the package to PyPI."
          required: false
          default: ""
      
        coverage_badge_gist_token:
          description: "Gist token used to store the code coverage badge."
          default: ""
      
        coverage_badge_gist_id:
          description: "Gist ID used to store the code coverage badge."
          required: false
          default: ""
      
        coverage_badge_gist_username:
          description: "Gist username used to store the code coverage badge. The current GitHub user will be used if this value is not provided."
          required: false
          default: ""
      
      runs:
        using: composite
        steps:
          - name: Install uv and python
            uses: astral-sh/setup-uv@v5
            with:
              enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
      
          - name: Download Python Package
            uses: actions/download-artifact@v4
            with:
              name: Python package
              path: dist
      
          # Create repository tag
          - name: Create Repository Tag
            shell: bash
            run: |-
              git config user.name "GitHub Action Bot"
              git config user.email "<>"
      
              git tag --annotate --force -m "Publish Tag" "v${{ env.PACKAGE_VERSION }}" "${{ github.sha }}"
              git push origin "v${{ env.PACKAGE_VERSION }}" --force
      
          # Commit code coverage
          - name: Create Code Coverage Badge
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            uses: schneegans/dynamic-badges-action@v1.7.0
            with:
              auth: ${{ inputs.coverage_badge_gist_token }}
              gistID: ${{ inputs.coverage_badge_gist_id }}
              filename: ${{ github.event.repository.name }}_code_coverage.json
              label: Coverage
              message: ${{ env.COVERAGE_TOTAL }}%
              valColorRange: ${{ env.COVERAGE_TOTAL }}
              minColorRange: 50
              maxColorRange: 90
      
          - name: Display Code Coverage Badge Url
            if: ${{ inputs.coverage_badge_gist_token != '' && inputs.coverage_badge_gist_id != '' }}
            shell: bash
            run: |-
              username="${{ inputs.coverage_badge_gist_username }}"
              if [ -z "${username}" ]; then
                username="${{ github.repository_owner }}"
              fi
      
              echo "**Code Coverage Badge:** [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
              echo "**Code Coverage Badge Markdown:** <code>\[!\[Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${username}/${{ inputs.coverage_badge_gist_id }}/raw/${{ github.event.repository.name }}_code_coverage.json)](${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)</code>" >> $GITHUB_STEP_SUMMARY
      
          # Sign artifacts
          - name: Sign Artifacts
            if: ${{ inputs.minisign_private_key != '' }}
            shell: bash
            run: |-
              pushd dist
      
              echo "**Signed Artifacts:**" >> $GITHUB_STEP_SUMMARY
      
              echo "${{ inputs.minisign_private_key }}" > /tmp/minisign.key
      
              for filename in *; do
                echo "- ${filename} [${filename}.minisig]" >> $GITHUB_STEP_SUMMARY
                uv run --with py-minisign python -c "import minisign; minisign.SecretKey.from_file('/tmp/minisign.key').sign_file('${filename}', trusted_comment='${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}', drop_signature=True)"
              done
      
              rm /tmp/minisign.key
      
          - name: Upload Signatures
            if: ${{ inputs.minisign_private_key != '' }}
            uses: actions/upload-artifact@v4
            with:
              name: Minisign signatures
              path: ./dist/*.minisig
      
          # Create the GitHub release
          - name: Create GitHub Release
            shell: bash
            run: |-
              gh release create "v${{ env.PACKAGE_VERSION }}" ./dist/* --generate-notes
      
          # Publish Python Package
          - name: Publish Python Package
            if: ${{ inputs.pypi_publish_token != '' }}
            shell: bash
            run: |-
              uv publish --token "${{ inputs.pypi_publish_token }}" --verbose
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.github/release_sources.yaml': '''
      # Changes to any of these files or a file within these directories will trigger a release.
      src:
        - 'src/**'
        - 'pyproject.toml'
        - 'README.md'
        - 'uv.lock'
  
    ''',
    '.github/workflows/CICD.yml': '''
      name: "CI+CD"
      run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}
      
      on:
        pull_request:
          branches:
            - main
        push:
          branches:
            - main
        schedule:
          - cron: '0 0 * * *' # Once a day at 12am UTC
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        CICD_Workflow:
          name: "CI+CD Workflow"
      
          permissions:
            contents: write
      
          uses: ./.github/workflows/CICD_impl.yml
      
          with:
            # These values can be customized for your specific requirements.
            operating_system_json_string: "[ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]"
            python_version_json_string: "['3.13', '3.12', '3.11', '3.10']"
            python_package_version: "3.10"
            coverage_badge_gist_id: "<<coverage_badge_gist_id>>"
            coverage_badge_gist_username: "<<coverage_badge_gist_username>>"
      
          secrets:
            # These values should be populated as GitHub Action secrets (https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions)
            MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
            PYPI_PUBLISH_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
            COVERAGE_BADGE_GIST_TOKEN: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
  
    ''',
    '.github/workflows/CICD_impl.yml': '''
      name: "[Callable] CI+CD Workflow Impl"
      
      on:
        workflow_call:
          inputs:
            operating_system_json_string:
              type: string
              description: "The operating systems to run the job on. Note that this is JSON content embedded within a string."
              required: true
      
            python_version_json_string:
              type: string
              description: "The Python versions to run the job with. Note that this is JSON content embedded within a string."
              required: true
      
            python_package_version:
              type: string
              description: "The python version used when creating the python package."
              required: true
      
            coverage_badge_gist_id:
              type: string
              description: "The ID of the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
              required: false
      
            coverage_badge_gist_username:
              type: string
              description: "The username used to access the Gist used to store coverage badge information. The current GitHub user will be used if this value is not provided."
              required: false
      
          secrets:
            MINISIGN_PRIVATE_KEY:
              required: false
              description: "Private key used to sign artifacts. Artifacts will not be signed if this value is missing."
      
            PYPI_PUBLISH_TOKEN:
              required: false
              description: "Token used to publish packages to PyPi. Packages will not be published if this value is missing."
      
            COVERAGE_BADGE_GIST_TOKEN:
              required: false
              description: "Token used to access the Gist used to store coverage badge information. Code coverage information will not be persisted if this value is missing."
      
      jobs:
        # ----------------------------------------------------------------------
        validate:
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate
          runs-on: ${{ matrix.os }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: true
      
            - name: Run pre-commit scripts
              run: uv run pre-commit run --verbose
      
            - name: Validate Tests
              run: uv run pytest
              env:
                COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                path: .coverage.${{ matrix.os }}.${{ matrix.python_version }}
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        package_coverage:
          needs: validate
      
          name: Postprocess Coverage Info
          runs-on: ubuntu-latest
      
          outputs:
            coverage_total: ${{ steps.combine_coverage_data.outputs.coverage_total }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Download Coverage Data
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
      
            - name: Combine Coverage Data
              id: combine_coverage_data
              shell: bash
              run: |
                uv run coverage combine .
                uv run coverage report --ignore-errors --show-missing --skip-covered
                uv run coverage json --ignore-errors -o .coverage.json
      
                export TOTAL=$(uv run python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
                echo "coverage_total=${TOTAL}" >> $GITHUB_OUTPUT
                echo "**Total coverage:** ${TOTAL}%" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Coverage Data
              uses: actions/upload-artifact@v4
              with:
                name: .coverage.json
                path: .coverage.json
                include-hidden-files: true
      
        # ----------------------------------------------------------------------
        python_package:
          needs: package_coverage
      
          name: Build Python Package
          runs-on: ubuntu-latest
      
          outputs:
            package_name: ${{ steps.package_name_and_version.outputs.package_name }}
            package_version: ${{ steps.package_name_and_version.outputs.package_version }}
      
          permissions:
            contents: read
      
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                python-version: ${{ inputs.python_package_version }}
      
            - name: Install Dependencies
              run: uv sync --frozen
      
            - name: Update Version
              run: uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src --verbose
      
            - name: Build Python Package
              run: uv build
      
            - name: Save Package Name and Version
              id: package_name_and_version
              run: |-
                cd dist
      
                export PACKAGE_NAME=$(ls *.whl)
                echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
                echo "**Package Name:** ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
      
                export PACKAGE_VERSION=$(uv run python -c "import this_is_the_project_name as package; print(package.__version__)")
                echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
                echo "**Package Version:** ${PACKAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
      
            - name: Upload Python Package
              uses: actions/upload-artifact@v4
              with:
                name: Python package
                path: dist/**
      
        # ----------------------------------------------------------------------
        validate_python_package:
          needs: python_package
      
          strategy:
            fail-fast: false
      
            matrix:
              os: ${{ fromJson(inputs.operating_system_json_string) }}
              python_version: ${{ fromJson(inputs.python_version_json_string) }}
      
          name: Validate Python Package
          runs-on: ${{ matrix.os }}
      
          env:
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
      
          permissions: {}
      
          steps:
            - name: Install uv and python
              uses: astral-sh/setup-uv@v5
              with:
                python-version: ${{ matrix.python_version }}
                enable-cache: false # No uv.lock or requirements.txt files, so nothing to cache on
                ignore-empty-workdir: true
      
            - name: Download Python Package
              uses: actions/download-artifact@v4
              with:
                name: Python package
                path: dist
      
            - name: Install Python Package
              run: uv pip install dist/${{ env.PACKAGE_NAME }}
      
            - name: Validate Python Package
              run: uv run python -c "import this_is_the_project_name as package; assert package.__version__ == '${{ env.PACKAGE_VERSION }}', package.__version__"
      
        # ----------------------------------------------------------------------
        release:
          needs: [package_coverage, python_package, validate_python_package]
      
          name: Release
          runs-on: ubuntu-latest
      
          env:
            COVERAGE_TOTAL: ${{ needs.package_coverage.outputs.coverage_total }}
            PACKAGE_NAME: ${{ needs.python_package.outputs.package_name }}
            PACKAGE_VERSION: ${{ needs.python_package.outputs.package_version }}
            GH_TOKEN: ${{ github.token }}
      
          permissions:
            contents: write  # To tag the repository and create the release
      
          steps:
            - uses: actions/checkout@v4
      
            - name: Has Release Changes?
              id: has_release_changes
              uses: dorny/paths-filter@v3
              with:
                filters: ./.github/release_sources.yaml
      
            - name: Release
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.has_release_changes.outputs.src == 'true' }}
              uses: ./.github/actions/release_impl
              with:
                minisign_private_key: ${{ secrets.MINISIGN_PRIVATE_KEY }}
                pypi_publish_token: ${{ secrets.PYPI_PUBLISH_TOKEN }}
                coverage_badge_gist_token: ${{ secrets.COVERAGE_BADGE_GIST_TOKEN }}
                coverage_badge_gist_id: ${{ inputs.coverage_badge_gist_id }}
                coverage_badge_gist_username: ${{ inputs.coverage_badge_gist_username }}
  
    ''',
    '.github/workflows/codeql.yml': '''
      # For most projects, this workflow file will not need changing; you simply need
      # to commit it to your repository.
      #
      # You may wish to alter this file to override the set of languages analyzed,
      # or to provide custom queries or build logic.
      #
      # ******** NOTE ********
      # We have attempted to detect the languages in your repository. Please check
      # the `language` matrix defined below to confirm you have the correct set of
      # supported CodeQL languages.
      #
      name: "CodeQL"
      
      on:
        push:
          branches: [ "main" ]
        pull_request:
          branches: [ "main" ]
        schedule:
          - cron: '0 0 * * *'
        workflow_dispatch:
      
      permissions: {}
      
      jobs:
        analyze:
          name: Analyze
          # Runner size impacts CodeQL analysis time. To learn more, please see:
          #   - https://gh.io/recommended-hardware-resources-for-running-codeql
          #   - https://gh.io/supported-runners-and-hardware-resources
          #   - https://gh.io/using-larger-runners
          # Consider using larger runners for possible analysis time improvements.
          runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
          timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
          permissions:
            # required for all workflows
            security-events: write
      
            # only required for workflows in private repositories
            actions: read
            contents: read
      
          strategy:
            fail-fast: false
            matrix:
              language: [ 'python' ]
              # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
              # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
              # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
              # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      
          steps:
          - name: Checkout repository
            uses: actions/checkout@v4
      
          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              # If you wish to specify custom queries, you can do so here or in a config file.
              # By default, queries listed here will override any specified in a config file.
              # Prefix the list here with "+" to use these queries and those in the config file.
      
              # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
              # queries: security-extended,security-and-quality
      
      
          # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
          # If this step fails, then you should remove it and run the build manually (see below)
          - name: Autobuild
            uses: github/codeql-action/autobuild@v3
      
          # ℹ️ Command-line programs to run using the OS shell.
          # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      
          #   If the Autobuild fails above, remove it and uncomment the following three lines.
          #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      
          # - run: |
          #     echo "Run, Build Application using script"
          #     ./location_of_script_within_repo/buildscript.sh
      
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3
            with:
              category: "/language:${{matrix.language}}"
  
    ''',
    '.gitignore': '''
      # Python-generated files
      __pycache__/
      *.py[oc]
      build/
      dist/
      wheels/
      *.egg-info
      
      # Virtual environments
      .venv
      .coverage
      .DS_Store
      .vscode
      coverage.xml
      minisign_key.pri
      post_generation_instructions.html
    ''',
    '.pre-commit-config.yaml': '''
      # See https://pre-commit.com for more information
      # See https://pre-commit.com/hooks.html for more hooks
      repos:
      - repo: local
        hooks:
        - id: uv sync --frozen
          name: uv sync --frozen
          entry: uv sync --frozen
          language: system
          pass_filenames: false
          require_serial: true
          always_run: true
      
        - id: uv run ruff format --check
          name: uv run ruff format --check
          entry: uv run ruff format --check
          language: system
          pass_filenames: false
          always_run: true
      
        - id: uv run ruff check
          name: uv run ruff check
          entry: uv run ruff check
          language: system
          pass_filenames: false
          always_run: true
  
    ''',
    '.python-version': '<<python_version>>',
    'CODE_OF_CONDUCT.md': '''
      # Contributor Code of Conduct
      
      ## Principles
      
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      
      Information on contributing to this project is available in [CONTRIBUTING.md](CONTRIBUTING.md).
      
      When participating in this open source community's conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      - Accept responsibility and apologize to those affected by our mistakes, and learn from the experience.
      - Focus on what is best not just for us as individuals, but for the overall community.
      
      ## Enforcement Responsibilities
      
      [Project maintainers](MAINTAINERS.md) are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
      
      Project maintainers have the right and responsibility to remove, edit, or reject contributions, comments, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
      
      ## Scope
      
      This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
      
      ## Acknowledgements
      
      This Code of Conduct was adapted from these resources:
      
      - The [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available [here](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
      - The [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool)
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      Additional information is available at the following locations.
      
      | Topic | Description | Location |
      | --- | --- | --- |
      | Code of Conduct | How we welcome others to this community. | [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) |
      | Development Activities | How we create software in this community. | [DEVELOPMENT.md](DEVELOPMENT.md) |
      | Security | How to report vulnerabilities in our software. | [SECURITY.md](SECURITY.md) |
      
      # Bug Reports
      If you experience a problem with our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Bug report`.
      
      # Feature Requests
      If you would like to suggest a new feature for our software, please visit [issues](https://github.com/<<github_username>>/<<github_repo_name>>/issues) and create a `Feature request`.
      
      # Issue Labels
      We use these labels to help us track and manage `Bug reports` and `Feature requests`.
      
      | Label | Description |
      | --- | --- |
      | `bug` | Something isn't working. |
      | `enhancement` | New feature or request. |
      | `help wanted` | Extra attention is needed. |
      | `good first issue` | Good for newcomers. |
      | `documentation` | Improvements or additions to documentation. |
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      
      | Step | Command Line | Additional Information |
      | --- | --- | --- |
      | 1. Clone the repository locally. | `git clone https://github.com/<<github_username>>/<<github_repo_name>>` | https://git-scm.com/docs/git-clone |
      | 2. Install [uv](https://github.com/astral-sh/uv). | `curl -LsSf https://astral.sh/uv/install.sh \| sh` on macOS and Linux or <br/>`powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 \| iex"` on Windows | https://docs.astral.sh |
      | 3. Install dependencies. | `uv sync` | https://docs.astral.sh/uv/concepts/projects/sync |
      | 4. Install [pre-commit](https://pre-commit.com/) hooks | `uv run pre-commit install` | https://pre-commit.com/#1-install-pre-commit |
      
      ## Development Activities
      
      | Activity | Command Line | Description | Used During Local Development | Invoked by Continuous Integration |
      | --- | --- | --- | :-: | :-: |
      | Code Formatting | `uv run ruff format` or<br>`uv run ruff format --check` | Format source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Static Code Analysis | `uv run ruff check` | Validate source code using [ruff](https://github.com/astral-sh/ruff) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: (via [pre-commit](https://pre-commit.com/)) |
      | Run pre-commit scripts | `uv run pre-commit run` | Run [pre-commit](https://pre-commit.com/) scripts based on settings in `.pre-commit-config.yaml`. | :white_check_mark: | :white_check_mark: |
      | Automated Testing | `uv run pytest` or<br/>`uv run pytest --no-cov` | Run automated tests using [pytest](https://docs.pytest.org/) and extract code coverage using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | :white_check_mark: | :white_check_mark: |
      | Semantic Version Generation | `uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src` | Generate a new [Semantic Version](https://semver.org/) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `pyproject.toml`. | | :white_check_mark: |
      | Python Package Creation | `uv build` | Create a python package using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. Generated packages will be written to `./dist`. | | :white_check_mark: |
      | Sign Artifacts | `uv run python -c "import minisign; minisign.SecretKey.from_file(<temp_filename>).sign_file(<filename>, trusted_comment='<package_name> v<package_version>', drop_signature=True)` | Signs artifacts using [py-minisign](https://github.com/x13a/py-minisign). Note that the private key is stored as a [GitHub secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions). | | :white_check_mark: |
      | Python Package Publishing | `uv publish` | Publish a python package to [PyPi](https://pypi.org/) using [uv](https://github.com/astral-sh/uv) based on settings in `pyproject.toml`. | | :white_check_mark: |
      
      ## Contributing Changes
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. For more information on creating branches, please see https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/.
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution](CONTRIBUTING.md) guidelines.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers Guide
      
      ## Current Maintainers
      
      The following individuals are responsible for maintaining this project. Feel free to reach out to any of them with questions or issues:
      
      | Maintainer        | GitHub Username   |
      | ----------------- | ----------------- |
      | Alice Smith       | `@alice`          |
      | Bob Johnson       | `@bob`            |
      | Carol Williams    | `@carol`          |
      
      ## Maintainer Responsibilities
      
      Maintainers are expected to:
      1. **Review and Merge Pull Requests:** Ensure that contributions are reviewed in a timely manner and merged if they meet the project's standards.
      2. **Issue Management:** Triage and respond to issues reported by the community. Prioritize and assign them as necessary.
      3. **Project Roadmap:** Help define and communicate the project's roadmap and key milestones.
      4. **Community Engagement:** Foster a positive and collaborative environment within the project's community. See [CONTRIBUTING.md](CONTRIBUTING.md) for additional information.
      
      ## Contribution Process
      
      To ensure a smooth contribution process, please follow these steps:
      
      1. **Fork the Repository:** Create a fork of the project repository.
      2. **Create a Branch:** Create a new branch for your changes.
      3. **Make Your Changes:** Implement your changes and commit them to your branch.
      4. **Submit a Pull Request:** Open a pull request with a clear description of your changes and the problem they solve.
      5. **Address Feedback:** Be responsive to any feedback or requested changes from the maintainers.
      
      ## Code of Conduct
      
      All contributors and maintainers are expected to adhere to the project's [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md). Please review it before participating in the project.
      
      ## Getting Help
      
      If you need help or have any questions, please contact one of the maintainers listed above or open an issue in the repository.
      
      Thank you for contributing to our project!
  
    ''',
    'README.md': '''
      **Project:**
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE)
      
      **Package:**
      [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Version](https://img.shields.io/pypi/v/this_is_the_project_name?color=dark-green)](https://pypi.org/project/this_is_the_project_name/)
      [![PyPI - Downloads](https://img.shields.io/pypi/dm/this_is_the_project_name)](https://pypistats.org/packages/this_is_the_project_name)
      
      **Development:**
      [![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
      [![CI](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml/badge.svg)](https://github.com/<<github_username>>/<<github_repo_name>>/actions/workflows/CICD.yml)
      [![Code Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/<<coverage_badge_gist_username>>/<<coverage_badge_gist_id>>/raw/<<github_repo_name>>_code_coverage.json)](https://github.com/<<github_username>>/<<github_repo_name>>/actions)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      
      <!-- Content above this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      
      ## Overview
      TODO: Complete this section
      
      ### How to use `this_is_the_project_name`
      TODO: Complete this section
      
      <!-- Content below this delimiter will be copied to the generated README.md file. DO NOT REMOVE THIS COMMENT, as it will cause regeneration to fail. -->
      
      ## Installation
      
      | Installation Method | Command |
      | --- | --- |
      | Via [uv](https://github.com/astral-sh/uv) | `uv add this_is_the_project_name` |
      | Via [pip](https://pip.pypa.io/en/stable/) | `pip install this_is_the_project_name` |
      
      ### Verifying Signed Artifacts
      Artifacts are signed and verified using [py-minisign](https://github.com/x13a/py-minisign) and the public key in the file `./minisign_key.pub`.
      
      To verify that an artifact is valid, visit [the latest release](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest) and download the `.minisign` signature file that corresponds to the artifact, then run the following command, replacing `<filename>` with the name of the artifact to be verified:
      
      ```shell
      uv run --with py-minisign python -c "import minisign; minisign.PublicKey.from_file('minisign_key.pub').verify_file('<filename>'); print('The file has been verified.')"
      ```
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
  
    ''',
    'SECURITY.md': '''
      # Security
      
      ## Reporting a Vulnerability
      
      If you discover any security issues or vulnerabilities, please report them to us privately. Do not create a public issue.
      
      **How to report a security vulnerability:**
      
      1. **Contact:** Please use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability).
          1. Under [this repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security)...
              - ...in the left sidebar...
              - ...under "Reporting"...
              - ...click "Advisories"
          2. Click the "New draft security advisory" button to open the advisory form.
      
      2. **Response Time:** We will acknowledge your report within 24 hours and provide an initial assessment within 48 hours.
      3. **Fixes:** Once the issue is confirmed, we will work to issue a fix as soon as possible and will keep you informed of our progress.
      
      ## Vulnerability Disclosure Policy
      
      We commit to working with security researchers and the community to verify and address any potential vulnerabilities. We ask that the following guidelines be followed to ensure an effective resolution:
      
      1. **Non-Disclosure:** Do not disclose the vulnerability publicly until we have had a reasonable chance to fix it. We will inform you when the issue is resolved.
      2. **Cooperation:** We may need additional information from you to effectively address the issue. Please cooperate with us during this process.
      
      Thank you for helping us keep our project secure!
      
      ## Patches
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_instructions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Instructions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "►";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Instructions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated. Check the box next to each step once it is completed.</p>
      
          <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-maintainers.md">1) Update MAINTAINERS.md</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace placeholder information in <code>MAINTAINERS.md</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>MAINTAINERS.md</code> in a text editor.</li>
        <li>Replace the placeholder maintainers in the table with your own information.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-pyproject.toml">2) Update pyproject.toml</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will replace information in <code>pyproject.toml</code> with information specific to your repository.</p>
      <ol>
        <li>Open <code>pyproject.toml</code> in a text editor.</li>
        <li>Scan the generated content and update it as necessary.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-github-settings">3) Update GitHub Settings</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will update GitHub settings to allow the creation of git tags during a release.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/actions</a>.</li>
        <li>In the "Workflow permissions" section...</li>
        <li>Select "Read and write permissions".</li>
        <li>Click the "Save" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-temporary-pypi-token">4) Create a Temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token used to publish the python package for the first time. The token created will be scoped to all of your projects on PyPi (which provides too much access). Once the package has been published for the first time, we will delete this temporary token and create a new one that is scoped to the single project.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>Temporary CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Entire account (all projects)</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-temporary-pypi-token-as-a-github-secret">5) Save the Temporary PyPi Token as a GitHub Secret</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://pypi.org" target="_blank">PyPi</a> token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>PYPI_PUBLISH_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-a-github-personal-access-token-for-gists">6) Create a GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will create a GitHub Personal Access Token (PAT) used when persisting code coverage information between Continuous Integration runs.</p>
      <ol>
        <li>Visit <a href="https://github.com/settings/tokens?type=beta" target="_blank">https://github.com/settings/tokens?type=beta</a>.</li>
        <li>Click the "Generate new token" button.</li>
        <li>Name the token <code>GitHub Workflow Gist (<<github_repo_name>>)</code>.</li>
        <li>In the Repository access section...</li>
        <li>Select "Only select repositories"...</li>
        <li>Select <code><<github_repo_name>></code>.</li>
        <li>In the "Permissions" section...</li>
        <li>Click on the "Account" tab...</li>
        <li>Click on the "Add permissions" button...</li>
        <li>Select the "Gists" checkbox.</li>
        <li>In the "Gists" list item that appears in the list of permissions...</li>
        <li>Ensure that "Access" is set to "Read and write".</li>
        <li>Click the "Generate token" button.</li>
        <li>Copy the token for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-github-personal-access-token-for-gists">7) Save the GitHub Personal Access Token for gists</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the GitHub Personal Access Token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>COVERAGE_BADGE_GIST_TOKEN</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the token generated in the previous step&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="save-the-minisign-private-key">8) Save the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Open <code>minisign_key.pri</code> in a text editor and copy all of the contents.</li>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/new</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Name:</th>
                <td><code>MINISIGN_PRIVATE_KEY</code></td>
              </tr>
              <tr>
                <th>Secret:</th>
                <td>&lt;paste the private key previously copied&gt;</td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Add secret" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="store-the-minisign-private-key">9) Store the Minisign Private Key</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>Store the <a href="https://github.com/x13a/py-minisign" target="_blank">Minisign</a> private key in a secure location. Once you have stored the key, you can delete it from your local machine.</p>
      <p>Note that you should NEVER force <code>minisign_key.pri</code> into source control.</p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-uv-locally">10) Install uv locally</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will install <a href="https://docs.astral.sh/uv" target="_blank">uv</a> for local development (if necessary) and initialize its dependencies.</p>
      
      <p>To install <code>uv</code> locally, follow the instructions at <a href="https://docs.astral.sh/uv/#installation" target="_blank">https://docs.astral.sh/uv/#installation</a>.</p>
      
      <p>To initialize this repository's dependencies, open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv sync</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="install-pre-commit">11) Install pre-commit</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will initialize <a href="https://pre-commit.com/" target="_blank">pre-commit</a> so that checks are run as a part of every commit.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following command:</p>
      
      1. <code>uv run pre-commit install</code>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="initialize-the-git-repository">12) Initialize the git repository</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "🎉 Initial commit"</code><br/>
      3. <code>git push</code><br/>
      <p></p>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="verify-the-ci/cd-workflow">13) Verify the CI/CD Workflow</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will verify that the GitHub Action workflow completed successfully.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/actions" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/actions</a>.</li>
        <li>Select the most recent workflow.</li>
        <li>Wait for the workflow to complete successfully.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-the-temporary-pypi-token">14) Delete the temporary PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In an earlier step, we created a temporary <a href="https://pypi.org" target="_blank">PyPi</a> token. In this step, we will delete that token. A new token to replace it will be created in the steps that follow.</p>
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/" target="_blank">https://pypi.org/manage/account/</a>.</li>
        <li>Find the token named <code>Temporary CI Publish Action (this_is_the_project_name)</code>...</li>
        <li>Click the "Options" dropdown button...</li>
        <li>Select "Remove token".</li>
        <li>In the dialog box that appears...</li>
        <li>Enter your password.</li>
        <li>Click the "Remove API token" button.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="create-an-official-pypi-token">15) Create an Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we create a new token scoped only to "this_is_the_project_name".</p>
      
      <ol>
        <li>Visit <a href="https://pypi.org/manage/account/token/" target="_blank">https://pypi.org/manage/account/token/</a>.</li>
        <li>
          <p>Enter the values:</p>
          <p>
            <table>
              <tr>
                <th>Token name:</th>
                <td><code>CI Publish Action (this_is_the_project_name)</code></td>
              </tr>
              <tr>
                <th>Scope:</th>
                <td><code>Project: this_is_the_project_name</code></td>
              </tr>
            </table>
          </p>
        </li>
        <li>Click the "Create token" button.</li>
        <li>Click the "Copy token" button for use in the next step.</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="update-the-github-secret-with-the-official-pypi-token">16) Update the GitHub Secret with the Official PyPi Token</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>In this step, we will save the PyPi token just created as a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank">GitHub Action secret</a>.</p>
      <ol>
        <li>Visit <a href="https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN" target="_blank">https://github.com/<<github_username>>/<<github_repo_name>>/settings/secrets/actions/PYPI_PUBLISH_TOKEN</a>.</li>
        <li>In the "Value" text window, paste the token generated in the previous step.</li>
        <li>Click "Update secret".</li>
      </ol>
      
      </div>
      
      <details>
        <summary>
          <span role="term"><input type="checkbox" id="delete-this-file">17) Delete this file</span>
        </summary>
      </details>
      <div role="definition" class="details-content">
        <p>After you have completed all the steps, you can delete this file.</p>
      <p>Now your project is ready to go!</p>
      
      </div>
      
      
          <script>
            document.addEventListener(
              "DOMContentLoaded",
              () => {
                document.querySelectorAll("details summary span input[type=checkbox]").forEach(
                  function(checkbox) {
                    var key = `${ location.href }-${ checkbox.id }`;
      
                    if(window.localStorage.getItem(key) === "true")
                      checkbox.checked = true;
      
                    this.addEventListener(
                      "change",
                      function() {
                        window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                      },
                    );
                  }
                );
      
                document.querySelectorAll("code").forEach(
                  function(code) {
                    const button = document.createElement("button");
      
                    button.textContent = "Copy";
                    button.style.marginLeft = "10px";
                    button.addEventListener(
                      "click",
                      () => {
                        navigator.clipboard.writeText(code.textContent).then(
                          () => {
                            button.textContent = "Copied!";
                            setTimeout(() => button.textContent = "Copy", 2000);
                          },
                        );
                      },
                    );
      
                    const wrapper = document.createElement("span");
      
                    code.parentNode.insertBefore(wrapper, code);
                    wrapper.appendChild(code);
                    wrapper.appendChild(button);
                  },
                );
              },
            );
          </script>
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      [project]
      name = "this-is-the-project-name"
      version = "0.0.0" 
      #          ^^^^^
      # Wheel names will be generated according to this value. Do not manually modify this value; instead
      # update it according to committed changes by running this command from the root of the repository:
      #
      #   uv run python -m AutoGitSemVer.scripts.UpdatePythonVersion ./pyproject.toml ./src
      
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">= 3.10"
      dependencies = []
      classifiers = [
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.10",
      ]
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      [build-system]
      requires = ["<<uv_build>>"]
      build-backend = "uv_build"
      
      [dependency-groups]
      dev = ["autogitsemver", "pre-commit", "py-minisign", "pytest", "pytest-cov", "ruff"]
      
      [tool.pytest.ini_options]
      addopts = "--verbose -vv --capture=no --cov=this_is_the_project_name --cov-report html --cov-report term --cov-report xml:coverage.xml --cov-fail-under=95.0"
      
      [tool.ruff]
      line-length = 110
      
      [tool.ruff.lint]
      exclude = ["tests/**"]
      
      select = ["ALL"]
      
      ignore = [
          "ANN002", # Missing type annotation for `*args`
          "ANN003", # Missing type annotation for `**kwargs`
          "BLE001", # Do not catch blind exception: `Exception`
          "COM812", # Trailing comma missing
          "D105", # Missing docstring in magic method
          "D107", # Missing docstring in `__init__` method
          "D202", # No blank lines allowed after function docstring
          "E501", # Line too long
          "FIX002", # Line contains TODO, consider resolving the issue
          "I001", # Import block is un-sorted or un-formatted
          "N802", # Function name `xxx` should be lowercase
          "N999", # Invalid module name
          "RSE102", # Unnecessary parentheses on raise exception
          "S101", # Use of assert detected
          "TC006", # Add quotes to type expression in `typing.cast()`
          "TD002", # Missing author in TODO
          "TD003", # Missing issue link for this TODO
          "TRY002", # Create your own exception
          "TRY300", # Consider moving this statement to an `else` block
          "UP032", # Use f-string instead of `format` call
      ]
      
      [tool.ruff.lint.mccabe]
      max-complexity = 15
      
      [tool.ruff.lint.pylint]
      max-args = 10
      max-branches = 20
      max-returns = 20
      
      [tool.uv.build-backend]
      module-name = "this_is_the_project_name"
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used to configure AutoGitSemVer as it calculates the semantic version for this
      # package. This file specifies that AutoGitSemVer should only look at changes in this directory,
      # its descendants, and files specified in this list when calculating the semantic version for the
      # package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
        - "../uv.lock"
  
    ''',
    'src/this_is_the_project_name/UvScaffolding_sample_file.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      
      def Add(a: int, b: int) -> int:
          """Add two numbers."""
          return a + b
      
      
      def Subtract(a: int, b: int) -> int:
          """Subtract two numbers."""
          return a - b
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      def hello() -> str:
          return "Hello from this-is-the-project-name!"
      
      
      # noqa: D104
      
      from importlib.metadata import version  # noqa: E402
      
      
      __version__ = version("this_is_the_project_name")
  
    ''',
    'src/this_is_the_project_name/py.typed': '',
    'tests/UvScaffolding_sample_file_test.py': '''
      """A sample file generated by copier - this file is safe to delete."""
      
      from this_is_the_project_name.UvScaffolding_sample_file import Add, Subtract
      
      
      def test_Add():
          assert Add(1, 2) == 3
      
      
      def test_Subtract():
          assert Subtract(1, 2) == -1
  
    ''',
  })
# ---
